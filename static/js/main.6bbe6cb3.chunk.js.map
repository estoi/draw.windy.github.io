{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","random","list","animateEnd","setState","isEnd","onStart","isStart","isShowList","startRodom","onEnd","stopRadom","currentIndex","state","console","log","_self","setInterval","index","length","clearInterval","sortList","sort","Math","message","success","onReset","handleOk","visible","showList","this","cls","className","width","height","params","particles","number","value","density","enable","value_area","color","shape","type","stroke","polygon","nb_sides","image","src","opacity","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","interactivity","events","onhover","mode","key","block","onClick","interval","title","centered","onOk","onCancel","okText","cancelText","okButtonProps","cancelButtonProps","map","item","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bbe6cb3.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, message, Modal } from 'antd'\nimport Particles from 'react-particles-js';\nimport QueueAnim from 'rc-queue-anim';\n\nimport './App.less';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isEnd: false,\n      isStart: false,\n      isShowList: false,\n      currentIndex: 0,\n      visible: false\n    }\n  }\n\n  random = null\n  list = [\n    '张杰',\n    '王硕',\n    '程艳',\n    '许聪',\n    '李峥',\n    '李冬梅',\n    '聂君',\n    '程叶子',\n    '周洁',\n    '左超',\n    '吴崇茂',\n    '李名杭',\n    '张慧敏',\n    '吴露露',\n    '黄永亮',\n    '曾婵',\n    '何康',\n    '王培培',\n    '方坤',\n    '何丽明',\n    '袁恒',\n    '丁晓敏',\n    '吴咏',\n    '马雪',\n    '魏文杰',\n    '王珂頔',\n    '陈云',\n    '张玉曾',\n    '程泽',\n    '邬凯',\n    '刘力',\n    '陆龙龙',\n    '胡景香',\n    '白萌',\n    '张玲',\n    '张文俊',\n    '黄羿轲',\n    '李锐',\n    '徐敏',\n    '雷秀',\n    '杨梅',\n    '张长春',\n    '李跃亚',\n    '张仲元',\n    '王珣珏',\n    '李红敏',\n    '郑钰',\n    '石静',\n    '颜雨秋',\n    '秦博雅',\n    '刘敏',\n    '桂思耀',\n    '谢孟凡'\n  ];\n\n  animateEnd = () => {\n    this.setState({\n      isEnd: true\n    })\n  }\n\n  onStart = () => {\n    this.setState({\n      isStart: true,\n      isShowList: true\n    }, this.startRodom)\n  }\n\n  onEnd = () => {\n    this.setState({\n      isStart: false\n    }, () => {\n      this.stopRadom()\n      const { currentIndex } = this.state;\n      console.log(this.list[currentIndex])\n    })\n  }\n\n\n  startRodom = () => {\n    const _self = this;\n    _self.random = setInterval(() => {\n      let { currentIndex } = _self.state;\n      let index = currentIndex\n      index++\n      if (index > this.list.length - 1) {\n        index = 0\n        _self.setState({\n          currentIndex: 0\n        })\n      }\n      _self.setState({\n        currentIndex: index\n      })\n    }, 50)\n  }\n\n  stopRadom = () => {\n    clearInterval(this.random)\n  }\n\n  sortList = () => {\n    const { list } = this\n    list.sort(() => Math.random() - 0.5)\n    this.setState({\n      currentIndex: 0,\n      isStart: false,\n      isShowList: false\n    })\n    message.success('已打乱员工名单顺序')\n  }\n\n  onReset = () => {\n    this.stopRadom()\n    this.setState({\n      currentIndex: 0,\n      isShowList: false,\n      isStart: false\n    })\n  }\n\n  handleOk = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  showList = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  render() {\n\n    const { isEnd, isStart, isShowList, currentIndex, visible } = this.state;\n\n    const cls = isEnd ? 'draw-content border' : 'draw-content'\n\n\n\n    const particles = {\n      number: {\n        value: 100,\n        density: {\n          enable: false,\n          value_area: 3200\n        }\n      },\n      color: {\n        value: \"#FDED24\"\n      },\n      shape: {\n        type: \"star\",\n        stroke: {\n          width: 5,\n          color: \"red\"\n        },\n        polygon: {\n          nb_sides: 5\n        },\n        image: {\n          src: \"\",\n          width: 100,\n          height: 100\n        }\n      },\n      opacity: {\n        value: 1,\n        random: true,\n        anim: {\n          enable: 1,\n          speed: 10,\n          opacity_min: .5,\n          sync: !1\n        }\n      },\n      size: {\n        value: 3,\n        random: true,\n        anim: {\n          enable: !1,\n          speed: 20,\n          size_min: 1,\n          sync: true\n        }\n      },\n      line_linked: {\n        enable: !0,\n        distance: 120,\n        color: \"#FF0\",\n        opacity: .6,\n        width: 1,\n      },\n    };\n\n    const interactivity = {\n      events: {\n        onhover: {\n          enable: true,\n          mode: 'grab'\n        }\n      }\n    }\n\n    return (\n      <div className=\"draw-home-wrap\">\n        <Particles\n          width=\"100%\"\n          height=\"100%\"\n          params={{\n            particles,\n            interactivity\n          }}\n        />\n        <div className=\"draw-list\">\n          {\n            isShowList ?\n              // <Carousel\n              //   dots={false}\n              //   effect=\"fade\"\n              //   ref={node => this.carouselList = node}\n              //   easing\n              //   autoplaySpeed={200}\n              // >\n              //   {\n              //     list.map((item, index) => {\n              //       return (\n              //         <p key={index}>{item}</p>\n              //       )\n              //     })\n              //   }\n              // </Carousel>:\n              <p>{this.list[currentIndex]}</p>\n              :\n              null\n          }\n\n        </div>\n        <div className={cls}>\n          {\n            !isStart ? (\n              <QueueAnim onEnd={this.animateEnd} interval={100}>\n                <div className=\"btn-groups\" key=\"a1\">\n                  <Button block type=\"ghost\" onClick={this.onStart}>开始抽奖</Button>\n                </div>\n                <div className=\"btn-groups\" key=\"a2\">\n                  <Button block type=\"ghost\" onClick={this.showList}>查看员工名单</Button>\n                </div>\n                <div className=\"btn-groups\" key=\"a3\">\n\n                  <Button block type=\"ghost\" onClick={this.sortList}>名单乱序</Button>\n                </div>\n              </QueueAnim>\n            ) :\n              (\n                <QueueAnim onEnd={this.animateEnd}>\n                  <div className=\"btn-groups\" key=\"b1\">\n                    <Button block type=\"ghost\" onClick={this.onEnd}>停止</Button>\n                  </div>\n                  <div className=\"btn-groups\" key=\"b2\">\n                    <Button block type=\"ghost\" onClick={this.onReset}>重新开始</Button>\n                  </div>\n                </QueueAnim>\n              )\n          }\n          {/* <QueueAnim onEnd={this.animateEnd} delay={1000}>\n            <div key=\"demo1\">\n              {\n                !isStart ?\n                  (\n                    <div className=\"btn-groups\">\n                      <Button block type=\"ghost\" onClick={this.onStart}>开始抽奖</Button>\n                      <Button block type=\"ghost\" onClick={this.showList}>查看员工名单</Button>\n                      <Button block type=\"ghost\" onClick={this.sortList}>名单乱序</Button>\n                    </div>\n                  )\n                  :\n                  (\n                    <div className=\"btn-groups\">\n                      <Button block type=\"ghost\" onClick={this.onEnd}>停止</Button>\n                      <Button block type=\"ghost\" onClick={this.onReset}>重新开始</Button>\n                    </div>\n                  )\n\n              }\n            </div>\n          </QueueAnim> */}\n        </div>\n        <Modal\n          title=\"抽奖名单\"\n          centered\n          visible={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleOk}\n          okText=\"确定\"\n          cancelText=\"取消\"\n          okButtonProps={{ type: 'ghost' }}\n          cancelButtonProps={{ type: 'ghost' }}\n        >\n          <div className=\"look-list\">\n            {\n              this.list.map((item, index) => {\n                return (\n                  <p key={index}>{item}</p>\n                );\n              })\n            }\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n\n} // class Home end","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}