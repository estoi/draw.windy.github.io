{"version":3,"sources":["music.ogg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","random","animateEnd","setState","isEnd","onStart","isStart","isShowList","music","load","play","startRodom","onEnd","pause","stopRadom","importList","visible2","importOk","importData","state","length","renderList","importCancel","_self","setInterval","index","currentIndex","_spliceList","splice","clearInterval","sortList","_list","sort","Math","message","success","onReset","handleOk","visible","showList","handleFileData","data","res","forEach","item","push","list","this","cls","uploadprops","accept","name","headers","authorization","showUploadList","beforeUpload","file","fileList","f","reader","FileReader","onload","e","target","result","workbook","XLSX","read","type","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","slice","readAsBinaryString","className","width","height","params","particles","number","value","density","enable","value_area","color","shape","stroke","polygon","nb_sides","image","src","opacity","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","interactivity","events","onhover","mode","decodeURI","key","block","onClick","interval","title","centered","onOk","onCancel","okText","cancelText","okButtonProps","cancelButtonProps","map","ref","node","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c12a8e6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/music.7a31176a.ogg\";","import React from 'react'\nimport { Button, message, Modal, Upload, Tooltip, Icon } from 'antd'\nimport Particles from 'react-particles-js';\nimport QueueAnim from 'rc-queue-anim';\nimport XLSX from 'xlsx';\n\nimport music from './music.ogg';\n\nimport './App.less';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isEnd: false, // 是否结束\n      isStart: false, // 是否开始\n      isShowList: false, // 是否展示\n      currentIndex: 0, // 当前位置\n      visible: false, \n      visible2: false,\n      importData: [], // 导入数据\n      renderList: [], // 渲染数据\n      list: [ // 原始数据\n        '%E5%BC%A0%E6%9D%B0',\n        '%E7%8E%8B%E7%A1%95',\n        '%E7%A8%8B%E8%89%B3',\n        '%E8%AE%B8%E8%81%AA',\n        '%E6%9D%8E%E5%B3%A5',\n        '%E6%9D%8E%E5%86%AC%E6%A2%85',\n        '%E8%81%82%E5%90%9B',\n        '%E7%A8%8B%E5%8F%B6%E5%AD%90',\n        '%E5%91%A8%E6%B4%81',\n        '%E5%B7%A6%E8%B6%85',\n        '%E5%90%B4%E5%B4%87%E8%8C%82',\n        '%E6%9D%8E%E5%90%8D%E6%9D%AD',\n        '%E5%BC%A0%E6%85%A7%E6%95%8F',\n        '%E5%90%B4%E9%9C%B2%E9%9C%B2',\n        '%E9%BB%84%E6%B0%B8%E4%BA%AE',\n        '%E6%9B%BE%E5%A9%B5',\n        '%E4%BD%95%E5%BA%B7',\n        '%E7%8E%8B%E5%9F%B9%E5%9F%B9',\n        '%E6%96%B9%E5%9D%A4',\n        '%E4%BD%95%E4%B8%BD%E6%98%8E',\n        '%E8%A2%81%E6%81%92',\n        '%E4%B8%81%E6%99%93%E6%95%8F',\n        '%E5%90%B4%E5%92%8F',\n        '%E9%A9%AC%E9%9B%AA',\n        '%E9%AD%8F%E6%96%87%E6%9D%B0',\n        '%E7%8E%8B%E7%8F%82%E9%A0%94',\n        '%E9%99%88%E4%BA%91',\n        '%E5%BC%A0%E7%8E%89%E6%9B%BE',\n        '%E7%A8%8B%E6%B3%BD',\n        '%E9%82%AC%E5%87%AF',\n        '%E5%88%98%E5%8A%9B',\n        '%E9%99%86%E9%BE%99%E9%BE%99',\n        '%E8%83%A1%E6%99%AF%E9%A6%99',\n        '%E7%99%BD%E8%90%8C',\n        '%E5%BC%A0%E7%8E%B2',\n        '%E5%BC%A0%E6%96%87%E4%BF%8A',\n        '%E9%BB%84%E7%BE%BF%E8%BD%B2',\n        '%E6%9D%8E%E9%94%90',\n        '%E5%BE%90%E6%95%8F',\n        '%E9%9B%B7%E7%A7%80',\n        '%E6%9D%A8%E6%A2%85',\n        '%E5%BC%A0%E9%95%BF%E6%98%A5',\n        '%E6%9D%8E%E8%B7%83%E4%BA%9A',\n        '%E5%BC%A0%E4%BB%B2%E5%85%83',\n        '%E7%8E%8B%E7%8F%A3%E7%8F%8F',\n        '%E6%9D%8E%E7%BA%A2%E6%95%8F',\n        '%E9%83%91%E9%92%B0',\n        '%E7%9F%B3%E9%9D%99',\n        '%E9%A2%9C%E9%9B%A8%E7%A7%8B',\n        '%E7%A7%A6%E5%8D%9A%E9%9B%85',\n        '%E5%88%98%E6%95%8F',\n        '%E6%A1%82%E6%80%9D%E8%80%80',\n        '%E8%B0%A2%E5%AD%9F%E5%87%A1',\n        '%E5%88%98%E6%99%93%E8%93%89',\n        '%E5%88%98%E6%85%A7%E6%95%8F'\n      ]\n    }\n  }\n\n  random = null\n\n  componentDidMount() {\n    // 初始化渲染数据\n    const { list } = this.state;\n    this.setState({\n      renderList: [...list]\n    });\n  }\n\n  // 动画结束\n  animateEnd = () => {\n    this.setState({\n      isEnd: true\n    })\n  }\n\n  // 开始抽奖\n  onStart = () => {\n    // 设置状态\n    this.setState({\n      isStart: true,\n      isShowList: true\n    }, () => {\n      // 播放音乐\n      this.music.load();\n      this.music.play();\n\n      // 开始\n      this.startRodom();\n    })\n  }\n\n\n  // 结束抽奖\n  onEnd = () => {\n    // 设置状态\n    this.setState({\n      isStart: false\n    }, () => {\n      // 暂停音乐\n      this.music.pause();\n      // 停止\n      this.stopRadom();\n    })\n  }\n\n  // 打开导入名单弹框\n  importList = () => {\n    this.setState({\n      visible2: true\n    });\n  }\n\n  // 导入名单\n  importOk = () => {\n    const { importData } = this.state;\n    if (importData.length > 1) {\n      this.setState({\n        renderList: importData\n      });\n      // this.list = importData;\n    }\n    this.setState({\n      visible2: false,\n      importData: []\n    })\n  }\n\n  // 关闭导入名单弹框\n  importCancel = () => {\n    this.setState({\n      importData: [],\n      visible2: false\n    })\n  }\n\n  // 开始递增下标\n  startRodom = () => {\n    const _self = this;\n    _self.random = setInterval(() => {\n      let { currentIndex, renderList } = _self.state;\n      let index = currentIndex\n      index++\n      if (index > renderList.length - 1) {\n        // 如果当前下标到达最后一位，则重新开始\n        index = 0\n        _self.setState({\n          currentIndex: 0\n        })\n      }\n      // 设置当前下标\n      _self.setState({\n        currentIndex: index\n      })\n    }, 50)\n  }\n\n  // 停止递增下标\n  stopRadom = () => {\n    const { currentIndex, renderList } = this.state;\n    // 把当前抽中的人从名单中剔除\n    const _spliceList = [...renderList];\n    _spliceList.splice(currentIndex, 1);\n    // 设置渲染数据\n    this.setState({\n      renderList: [..._spliceList]\n    });\n\n    // 清除定时器\n    clearInterval(this.random)\n  }\n\n  // 名单乱序\n  sortList = () => {\n    const { renderList } = this.state;\n    // 打乱名单顺序\n    let _list = [...renderList];\n    _list.sort(() => Math.random() - 0.5)\n    // 设置状态/渲染数据\n    this.setState({\n      currentIndex: 0,\n      isStart: false,\n      isShowList: false,\n      renderList: [..._list]\n    })\n    message.success('已打乱员工名单顺序')\n  }\n\n  // 重置\n  onReset = () => {\n    // 停止\n    this.stopRadom()\n    // 设置状态\n    this.setState({\n      currentIndex: 0,\n      isShowList: false,\n      isStart: false\n    })\n  }\n\n  // 关闭人员名单弹框\n  handleOk = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  // 打开人员名单弹框\n  showList = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  // 处理excel导入数据\n  handleFileData = (data) => {\n    let res = [];\n    data.forEach(item => {\n      if (!!item[0]) {\n        res.push(item[0])\n      }\n    })\n    this.setState({\n      importData: [...res]\n    }, () => {\n      message.success('Excel上传成功，请点击确认按钮导入名单');\n    })\n  }\n\n  render() {\n\n\n    const { isEnd, isStart, isShowList, currentIndex, visible, visible2, importData, renderList } = this.state;\n\n    const cls = isEnd ? 'draw-content border' : 'draw-content'\n\n    // 粒子背景配置参数\n    const particles = {\n      number: {\n        value: 100,\n        density: {\n          enable: false,\n          value_area: 3200\n        }\n      },\n      color: {\n        value: \"#FDED24\"\n      },\n      shape: {\n        type: \"star\",\n        stroke: {\n          width: 5,\n          color: \"red\"\n        },\n        polygon: {\n          nb_sides: 5\n        },\n        image: {\n          src: \"\",\n          width: 100,\n          height: 100\n        }\n      },\n      opacity: {\n        value: 1,\n        random: true,\n        anim: {\n          enable: 1,\n          speed: 10,\n          opacity_min: .5,\n          sync: !1\n        }\n      },\n      size: {\n        value: 3,\n        random: true,\n        anim: {\n          enable: !1,\n          speed: 20,\n          size_min: 1,\n          sync: true\n        }\n      },\n      line_linked: {\n        enable: !0,\n        distance: 120,\n        color: \"#FF0\",\n        opacity: .6,\n        width: 1,\n      },\n    };\n\n    const interactivity = {\n      events: {\n        onhover: {\n          enable: true,\n          mode: 'grab'\n        }\n      }\n    }\n\n\n    // upload处理\n    const uploadprops = {\n      // 这里我们只接受excel2007以后版本的文件，accept就是指定文件选择框的文件类型\n      accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      name: 'file',\n      headers: {\n        authorization: 'authorization-text',\n      },\n      showUploadList: false,\n      // 把excel的处理放在beforeUpload事件，否则要把文件上传到通过action指定的地址去后台处理\n      // 这里我们没有指定action地址，因为没有传到后台\n      beforeUpload: (file, fileList) => {\n        var rABS = true;\n        const f = fileList[0];\n        var reader = new FileReader();\n        const _self = this;\n        reader.onload = function (e) {\n          var data = e.target.result;\n          if (!rABS) data = new Uint8Array(data);\n          var workbook = XLSX.read(data, {\n            type: rABS ? 'binary' : 'array'\n          });\n          // 假设我们的数据在第一个标签\n          var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          // XLSX自带了一个工具把导入的数据转成json\n          var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\n          // 通过自定义的方法处理Json，比如加入state来展示\n          _self.handleFileData(jsonArr.slice(1))\n        };\n        if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\n        return false;\n      }\n    };\n\n    return (\n      <div className=\"draw-home-wrap\">\n        <Particles\n          width=\"100%\"\n          height=\"100%\"\n          params={{\n            particles,\n            interactivity\n          }}\n        />\n        <div className=\"draw-list\">\n          {\n            isShowList ?\n              <p>{decodeURI(renderList[currentIndex])}</p>\n              :\n              null\n          }\n\n        </div>\n        <div className={cls}>\n          {\n            !isStart ? (\n              <QueueAnim onEnd={this.animateEnd} interval={100}>\n                <div className=\"btn-groups\" key=\"a1\">\n                  <Button block type=\"ghost\" onClick={this.onStart}>开始抽奖</Button>\n                </div>\n                {/* <div className=\"btn-groups\" key=\"a2\">\n                  <Button block type=\"ghost\" onClick={this.importList}>导入名单</Button>\n                </div> */}\n                <div className=\"btn-groups\" key=\"a3\">\n                  <Button block type=\"ghost\" onClick={this.showList}>查看员工名单</Button>\n                </div>\n                <div className=\"btn-groups\" key=\"a4\">\n\n                  <Button block type=\"ghost\" onClick={this.sortList}>名单乱序</Button>\n                </div>\n              </QueueAnim>\n            ) :\n              (\n                <QueueAnim onEnd={this.animateEnd}>\n                  <div className=\"btn-groups\" key=\"b1\">\n                    <Button block type=\"ghost\" onClick={this.onEnd}>停止</Button>\n                  </div>\n                  <div className=\"btn-groups\" key=\"b2\">\n                    <Button block type=\"ghost\" onClick={this.onReset}>重新开始</Button>\n                  </div>\n                </QueueAnim>\n              )\n          }\n        </div>\n        <Modal\n          title=\"导入名单\"\n          centered\n          visible={visible2}\n          onOk={this.importOk}\n          onCancel={this.importCancel}\n          okText=\"确定\"\n          cancelText=\"取消\"\n          okButtonProps={{ type: 'ghost' }}\n          cancelButtonProps={{ type: 'ghost' }}\n        >\n          <Upload {...uploadprops}>\n            <Tooltip title='导入excel文件'>\n              <Button type=\"primary\" >\n                <Icon type=\"upload\" /> 导入\n              </Button>\n            </Tooltip>\n          </Upload>\n          {\n            importData.length > 1 ? (\n              <div className=\"look-list\">\n                {\n                  importData.map((item, index) => {\n                    return (\n                      <p key={index}>{item}</p>\n                    );\n                  })\n                }\n              </div>\n            ) :\n              null\n          }\n\n        </Modal>\n        <Modal\n          title=\"抽奖名单\"\n          centered\n          visible={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleOk}\n          okText=\"确定\"\n          cancelText=\"取消\"\n          okButtonProps={{ type: 'ghost' }}\n          cancelButtonProps={{ type: 'ghost' }}\n        >\n          <div className=\"look-list\">\n            {\n              renderList.map((item, index) => {\n                return (\n                  <p key={index}>{decodeURI(item)}</p>\n                );\n              })\n            }\n          </div>\n        </Modal>\n        <audio ref={node => this.music = node} style={{width: 0, height: 0}} src={music} type=\"audio/ogg\">\n\n        </audio>\n      </div>\n    )\n  }\n\n} // class Home end","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}